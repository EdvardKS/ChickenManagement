Objetivo: Desarrollar la funcionalidad completa para gestionar los encargos y el stock de un negocio de venta de pollos. Ya se cuenta con el frontend montado en React con TanStack Query y TailwindCSS, pero falta implementar la base de datos, las rutas API y la lÃ³gica de negocio.

ðŸ”¹ 1. Base de Datos
ðŸ“Œ Tabla: orders (Encargos)
Crea una tabla orders para registrar los pedidos con los siguientes campos:

id (UUID, PK, autogenerado)
customer_name (STRING, NOT NULL)
customer_phone (STRING, puede ser NULL)
details (TEXT, puede ser NULL)
order_date (TIMESTAMP, fecha de creaciÃ³n del encargo, autogenerada)
pickup_date (DATE, fecha en que el cliente recogerÃ¡ el pedido)
pickup_time (TIME, hora en que el cliente recogerÃ¡ el pedido)
quantity (FLOAT, almacena la cantidad de pollos, por ejemplo, 1.5 en lugar de 1 1/2)
is_delivered (BOOLEAN, default: false)
is_canceled (BOOLEAN, default: false)
is_manual_entry (BOOLEAN, default: true, indica si se registrÃ³ desde el panel manualmente)
holiday_name (STRING, puede ser NULL, almacena el nombre del dÃ­a festivo si aplica)
was_error (BOOLEAN, default: false, indica si se marcÃ³ como "Apuntado por Error")
ðŸ“Œ Tabla: stock (Control de Stock)
Crea una tabla stock para registrar la gestiÃ³n del inventario:

id (UUID, PK, autogenerado)
date (DATE, NOT NULL, cada dÃ­a se registra un nuevo stock)
total_mounted_chickens (INTEGER, cantidad de pollos montados al inicio del dÃ­a)
current_stock (FLOAT, cantidad de pollos disponibles en tiempo real)
reserved_stock (FLOAT, cantidad de pollos con encargo)
unreserved_stock (FLOAT, cantidad de pollos sin encargo)
created_at (TIMESTAMP, default: now())
updated_at (TIMESTAMP, se actualiza con cada cambio)
ðŸ“Œ Tabla: stock_log (Registro de Acciones en Stock)
Cada vez que se modifique el stock, se guarda un historial de cambios:

id (UUID, PK, autogenerado)
date (DATE, NOT NULL)
action (STRING, "add", "remove", "sale", "reset", "error")
quantity (FLOAT, cantidad modificada)
previous_stock (FLOAT, stock antes de la modificaciÃ³n)
new_stock (FLOAT, stock despuÃ©s de la modificaciÃ³n)
order_id (UUID, puede ser NULL si no estÃ¡ relacionado con un pedido)
created_at (TIMESTAMP, default: now())
ðŸ”¹ 2. Backend (API en Node.js con Express y PostgreSQL)
Crea rutas API para gestionar los pedidos y el stock:

ðŸ“Œ Rutas para Encargos (/api/orders)
POST /api/orders â†’ Crea un nuevo encargo en la base de datos.
GET /api/orders â†’ Obtiene todos los encargos.
PATCH /api/orders/:id/delivered â†’ Marca un encargo como entregado (is_delivered = true).
PATCH /api/orders/:id/canceled â†’ Marca un encargo como cancelado (is_canceled = true).
PATCH /api/orders/:id/error â†’ Marca un encargo como error (was_error = true).
DELETE /api/orders/:id â†’ Elimina un encargo y actualiza el stock sumando la cantidad eliminada.
ðŸ“Œ Rutas para Stock (/api/stock)
GET /api/stock â†’ Obtiene el stock actual del dÃ­a.
POST /api/stock/add â†’ Suma pollos al stock (+6, +1).
POST /api/stock/remove â†’ Resta pollos del stock (-6, -1).
POST /api/stock/sell â†’ Resta stock al vender sin encargo (-0.5, -1).
POST /api/stock/reset â†’ Resetea los valores del dÃ­a.
CRON Job a las 06:00 â†’ Instancia automÃ¡ticamente el stock a 0 cada dÃ­a.
CRON Job a las 07:00 â†’ Verifica que el stock fue reseteado correctamente y, si no, lo hace.
ðŸ”¹ 3. Frontend (React + TanStack Query)
ðŸ“Œ Modificar el Drawer de Nuevo Encargo
Enviar la data al endpoint /api/orders con:
Nombre del cliente
TelÃ©fono
Fecha y hora de recogida
Cantidad de pollos en formato float
Indicar que es un registro manual (is_manual_entry = true)
ðŸ“Œ Modificar el Drawer de Stock
Hacer funcionales los botones de +6, +1, -6, -1, -0.5, +0.5 enviando datos a /api/stock/add y /api/stock/remove.
El botÃ³n de "Iniciar DÃ­a" se reemplaza por "Resetear Valores" con doble alerta de confirmaciÃ³n y estilos de peligro.
Al hacer clic en "Entregado" desde la tabla:
Se envÃ­a un PATCH /api/orders/:id/delivered
Se actualiza el stock.actual restando la cantidad entregada.
ðŸ“Œ Agregar Botones en la Tabla de Pedidos
Cada pedido tendrÃ¡:

BotÃ³n "Ver Detalles" â†’ Abre un Drawer con el pedido en grande.
BotÃ³n "WhatsApp" (si tiene telÃ©fono) â†’ Genera dinÃ¡micamente un link:
perl
Copiar
Editar
https://wa.me/<customer_phone>?text=Hola%20<customer_name>,%20tu%20pedido%20de%20<quantity>%20pollos%20estÃ¡%20listo.
Nota: Este botÃ³n tendrÃ¡ un icono con "saltitos" si el pedido necesita confirmaciÃ³n.
BotÃ³n "Entregado" â†’ Marca el pedido como entregado y descuenta el stock.
BotÃ³n "Cancelado" â†’ Marca el pedido como cancelado.
BotÃ³n "Apuntado por Error" â†’ Restaura el stock y marca el pedido como error.
ðŸ”¹ 4. Dashboard de AnÃ¡lisis para Administrador
Crear una pÃ¡gina para mostrar analÃ­ticas de pedidos y stock:

ðŸ“ˆ Encargos por dÃ­a, semana y mes.
ðŸ“Š CuÃ¡ntos fueron manuales vs. cuÃ¡ntos llegaron por otro medio.
ðŸ“Š Promedio de cantidad de pollos por pedido.
ðŸ“Š Ventas con vs. sin encargo.
ðŸ“Š DÃ­as festivos con mÃ¡s encargos.
ðŸ“Š Historial de stock y ajustes manuales.
ðŸ”¹ 5. Extras y Validaciones
âœ… Si un pedido es eliminado, se suma su cantidad al stock automÃ¡ticamente.
âœ… Si un pedido es marcado como error, tambiÃ©n se restaura el stock y se registra en el log.
âœ… Validaciones en el backend para evitar cantidades negativas en el stock.
âœ… Logs de acciones en stock_log para rastrear todos los cambios.
âœ… CRON Jobs para asegurar la correcta inicializaciÃ³n del stock diario.

ðŸ“Œ ConclusiÃ³n
Este prompt es hiper detallado para que la IA genere toda la funcionalidad completa del sistema, desde la base de datos hasta la integraciÃ³n con el frontend. Con esto, la IA podrÃ¡ construir el backend, frontend y la estructura necesaria sin errores ni ambigÃ¼edades.